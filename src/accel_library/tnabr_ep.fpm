{% if fpms['config']['tnabr'] %}
{% if fpms['config']['tnabr']['has_l3'] == '1' %}
    {% include "tnartr.fpm" %} 
{% endif %}
{% endif %}



SEC("TNAFPM")
{% if fpms['config']['dp_type'] == "FPM_XDP" %}
int tnabr(struct xdp_md* ctx)
{% endif %}

{% if fpms['config']['dp_type'] == "FPM_TC" %}
int tnabr(struct __sk_buff *ctx)
{% endif %}
{
    void *data_end = (void *)(long)ctx->data_end;
    void *data = (void *)(long)ctx->data;
    struct tna_meta_t tna_meta = {0};
    tna_meta.eth = NULL;
    tna_meta.iph = NULL;
    tna_meta.vlh = NULL;
    struct collect_vlans vlans = {0};

	/* These keep track of the next header type and iterator pointer */
	struct hdr_cursor nh;
	int nh_type;

	/* Start next header cursor position at data start */
	nh.pos = data;

	tna_meta.fdb_params.ifindex = ctx->ingress_ifindex;
	/* Start parsing */
	/* need to disable vlan offloads for VLANs to work... "sudo ethtool -K <device> rxvlan off 
	 * TNA should call this only if valan filtering is enabled on a bridge. 
	 * Otherwise parse_ethhdr should be called 
	 */
	nh_type = parse_ethhdr_vlan(&nh, data_end, &tna_meta.eth, &vlans);
	
	tna_meta.fdb_params.vid = vlans.id[0];

	if (tna_meta.eth) {
		bpf_fdb_lookup(ctx, &tna_meta.fdb_params, sizeof(tna_meta.fdb_params), tna_meta.eth->h_source, tna_meta.eth->h_dest);
	}

	if (tna_meta.fdb_params.egress_ifindex > 0 && tna_meta.fdb_params.flags == 1) {
		//Is it possible to see if the port is untagged via the helper?
		//if (tna_meta.fdb_params.egress_ifindex == 5)
		//	vlan_tag_pop(ctx, tna_meta.eth);
		{% if fpms['config']['dp_type'] == "FPM_XDP" %}
			return bpf_redirect_map(&tx_port, tna_meta.fdb_params.egress_ifindex, 0);
		{% endif %}
		{% if fpms['config']['dp_type'] == "FPM_TC" %}
			return bpf_redirect(tna_meta.fdb_params.egress_ifindex, 0);
		{% endif %}
	}

	if (tna_meta.fdb_params.flags == 0) { //STP learning
		{% if fpms['config']['dp_type'] == "FPM_XDP" %}
		return XDP_PASS;
		{% endif %}
		{% if fpms['config']['dp_type'] == "FPM_TC" %}
		return TC_ACT_OK;
		{% endif %}
	}

	if (tna_meta.fdb_params.flags == 2) { //STP blocked
		{% if fpms['config']['dp_type'] == "FPM_XDP" %}
		return XDP_DROP;
		{% endif %}
		{% if fpms['config']['dp_type'] == "FPM_TC" %}
		return TC_ACT_SHOT;
		{% endif %}
	}

	{% if fpms['config']['tnabr'] %}
	{% if fpms['config']['tnabr']['has_l3'] == '1' %}

	//This should only be deployed if bridge vlan interfaces have IP addresses configured on them
    //Logic for detecting this goes in the "service introspection"
	if (tna_meta.fdb_params.flags == 3 && nh_type == bpf_htons(ETH_P_IP)) {
		//bpf_debug("Needs routing\n");
		tna_meta.iph = nh.pos;

		if (tna_meta.iph + 1 > data_end)
			{% if fpms['config']['dp_type'] == "FPM_XDP" %}
			return XDP_DROP;
			{% endif %}
			{% if fpms['config']['dp_type'] == "FPM_TC" %}
			return TC_ACT_SHOT;
			{% endif %}

		tna_meta.vlh = (void *)(tna_meta.eth + 1);

		if (tna_meta.vlh + 1 > data_end)
			{% if fpms['config']['dp_type'] == "FPM_XDP" %}
			return XDP_DROP;
			{% endif %}
			{% if fpms['config']['dp_type'] == "FPM_TC" %}
			return TC_ACT_SHOT;
			{% endif %}
    

		return tnartr(ctx, &tna_meta);
	}
    {% endif %}
    {% endif %}

	{% if fpms['config']['dp_type'] == "FPM_XDP" %}
	return XDP_PASS;
	{% endif %}
	{% if fpms['config']['dp_type'] == "FPM_TC" %}
	return TC_ACT_OK;
	{% endif %}
}

char _license[] SEC("license") = "GPL";

